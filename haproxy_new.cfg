global
 pidfile dashboard/haproxy-private.pid

 daemon
 maxconn 4096
 stats socket dashboard/haproxy.stats.sock level admin


 ###
 #
 # Experimental: Logging Setup
 #
 # We log to a unix socket and read that socket from the Go program
 #
 #
 log /var/run/vamp.log.sock local0

 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option clitcpka
   option srvtcpka

   retries 3
   maxconn 500000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000s
   timeout server 50000s

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth showme:showme

### BEGIN GENERATED SECTION ###

frontend my_write_frontend
    
    bind 0.0.0.0:3306
    

    
     option tcplog 


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    #log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    

    mode tcp
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend service_write


frontend my_read_frontend
    
    bind 0.0.0.0:3307
    

    
     option tcplog 


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    #log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    

    mode tcp
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend service_read






backend service_write
    mode tcp
#
# Regular HTTP/TCP backends
#

   
    balance leastconn 



   

   
    
        server leader 127.0.0.1:5154  weight 100 maxconn 2000 check inter 1 
    
    
    
    
    
    
    
    
    
    
    





backend service_read
    mode tcp
#
# Regular HTTP/TCP backends
#

   
    balance leastconn 



   

   
    
        server 18081061674247546617 127.0.0.1:5154  weight 100 maxconn 2000 check inter 1 
        server 13025933470029201952 127.0.0.1:5112  weight 100 maxconn 2000 check inter 1 
    
    
    
    
    
    
    
    
    
    
    






### END GENERATED SECTION ###
